// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: protos/service/spider.proto

package spider

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Spider_GetSeenList_FullMethodName = "/service.Spider/GetSeenList"
	Spider_GetHealth_FullMethodName   = "/service.Spider/GetHealth"
)

// SpiderClient is the client API for Spider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpiderClient interface {
	GetSeenList(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SeenListRequest, SeenListResponse], error)
	GetHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type spiderClient struct {
	cc grpc.ClientConnInterface
}

func NewSpiderClient(cc grpc.ClientConnInterface) SpiderClient {
	return &spiderClient{cc}
}

func (c *spiderClient) GetSeenList(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SeenListRequest, SeenListResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Spider_ServiceDesc.Streams[0], Spider_GetSeenList_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SeenListRequest, SeenListResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Spider_GetSeenListClient = grpc.BidiStreamingClient[SeenListRequest, SeenListResponse]

func (c *spiderClient) GetHealth(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, Spider_GetHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpiderServer is the server API for Spider service.
// All implementations must embed UnimplementedSpiderServer
// for forward compatibility.
type SpiderServer interface {
	GetSeenList(grpc.BidiStreamingServer[SeenListRequest, SeenListResponse]) error
	GetHealth(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedSpiderServer()
}

// UnimplementedSpiderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpiderServer struct{}

func (UnimplementedSpiderServer) GetSeenList(grpc.BidiStreamingServer[SeenListRequest, SeenListResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetSeenList not implemented")
}
func (UnimplementedSpiderServer) GetHealth(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedSpiderServer) mustEmbedUnimplementedSpiderServer() {}
func (UnimplementedSpiderServer) testEmbeddedByValue()                {}

// UnsafeSpiderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpiderServer will
// result in compilation errors.
type UnsafeSpiderServer interface {
	mustEmbedUnimplementedSpiderServer()
}

func RegisterSpiderServer(s grpc.ServiceRegistrar, srv SpiderServer) {
	// If the following call pancis, it indicates UnimplementedSpiderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Spider_ServiceDesc, srv)
}

func _Spider_GetSeenList_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpiderServer).GetSeenList(&grpc.GenericServerStream[SeenListRequest, SeenListResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Spider_GetSeenListServer = grpc.BidiStreamingServer[SeenListRequest, SeenListResponse]

func _Spider_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiderServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Spider_GetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiderServer).GetHealth(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Spider_ServiceDesc is the grpc.ServiceDesc for Spider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Spider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Spider",
	HandlerType: (*SpiderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _Spider_GetHealth_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSeenList",
			Handler:       _Spider_GetSeenList_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/service/spider.proto",
}
